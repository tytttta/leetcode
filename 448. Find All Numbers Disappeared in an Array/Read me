Problem description :

Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]


Solution:
/**
算法的第一步，将数组中每个元素指向的那个元素设置为它的负数。比如，我们当前正在检查的元素值为 4，那么我们就将数组第四个位置（对应下标应该为 3）设置为负数，当然如果它本身就是负数（这种情况对应的是该元素已经出现过一次了），就不需要处理。这一步执行完了，我们就将遇到过的元素都标记为了负数。

第二步就是从头遍历这些元素，如果哪个元素的指还是正数，那么就说明它这个下标 +1 对应的那个数字没有出现。这就是关键的地方
*?
First, search the array from the begin to the end,if a number(from 1-n) exists in this array, then mark value of the index(number-1) be negative.
Seconde, if the value is negative, it mean the index is not in the array ,so it is the wanted number.

For example:
If we check the first index 0, its value is 4, which means the number 4 is in the array, then  we mark the forth number(index 3)  to be negative, until all the index is checked. At last,we will find which value is not negative, which means the its index is not appeared.

tips:


